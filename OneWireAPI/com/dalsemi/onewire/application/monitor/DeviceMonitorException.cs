using System;

/*---------------------------------------------------------------------------
 * Copyright (C) 2002 Dallas Semiconductor Corporation, All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL DALLAS SEMICONDUCTOR BE LIABLE FOR ANY CLAIM, DAMAGES
 * OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of Dallas Semiconductor
 * shall not be used except as stated in the Dallas Semiconductor
 * Branding Policy.
 *---------------------------------------------------------------------------
 */

namespace com.dalsemi.onewire.application.monitor
{
    using com.dalsemi.onewire.adapter;

    /// <summary>
    /// Represents an encapsulated exception from a particular Device Monitor.
    /// The state of this exception includes the device monitor object from
    /// which the exception was thrown, the DSPortAdapter object that was being
    /// used by the monitor, and the exact exception that was thrown.
    ///
    /// @author SH
    /// @version 1.00
    /// </summary>
    public class DeviceMonitorException : Exception
    {
        /// <summary>
        /// The monitor which generated the event </summary>
        protected internal AbstractDeviceMonitor deviceMonitor = null;

        /// <summary>
        /// The DSPortAdapter the monitor was using at the time of event </summary>
        protected internal DSPortAdapter adapter = null;

        /// <summary>
        /// The exception that was generated by the search </summary>
        protected internal Exception exception;

        /// <summary>
        /// Creates a new DeviceMonitor event with the specified characteristics.
        /// </summary>
        /// <param name="source"> The monitor which generated the exception </param>
        /// <param name="adapter"> The DSPortAdapter the monitor was using </param>
        /// <param name="exception"> The actual exception which was thrown </param>
        internal DeviceMonitorException(AbstractDeviceMonitor deviceMonitor, DSPortAdapter adapter, Exception exception) : base("Device Monitor Exception")
        {
            this.deviceMonitor = deviceMonitor;
            this.adapter = adapter;
            this.exception = exception;
        }

        /// <summary>
        /// Returns the monitor which generated this event
        /// </summary>
        /// <returns> the monitor which generated this event </returns>
        public virtual AbstractDeviceMonitor Monitor
        {
            get
            {
                return this.deviceMonitor;
            }
        }

        /// <summary>
        /// Returns DSPortAdapter the monitor was using when the event was generated
        /// </summary>
        /// <returns> DSPortAdapter the monitor was using </returns>
        public virtual DSPortAdapter Adapter
        {
            get
            {
                return this.adapter;
            }
        }

        /// <summary>
        /// Returns the wrapped exception that was generated during a 1-Wire search.
        /// </summary>
        /// <returns> the wrapped exception that was generated during a 1-Wire search. </returns>
        public virtual Exception Exception
        {
            get
            {
                return exception;
            }
        }

        /// <summary>
        /// Throws the wrapped exception to the calling object.
        ///
        /// </summary>
        public virtual void throwException()
        {
            throw exception;
        }

        /// <summary>
        /// Converts this object to a String.
        /// </summary>
        /// <returns> a string representation of this object </returns>
        public override string ToString()
        {
            return "Device Monitor Exception: " + exception.ToString();
        }
    }
}